# Copyright 2021 IBM Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
apiVersion: tekton.dev/v1beta1
kind: PipelineRun
metadata:
  annotations:
    pipelines.kubeflow.org/pipeline_spec: '{"description": "Convert a Data Asset EXchange
      YAML file to Data Lifecycle Framework YAML file.", "inputs": [{"default": "content:\n-
      description: Raw data file\n  format: CSV\n  mime_type: text/csv\n  pattern:
      noaa-weather-data-jfk-airport/jfk_weather.csv\n  records: 114546\n  size: 30M\n  type:
      file\n- description: jfk_weather.csv cleaned-up using noaa-weather-data-jfk-airport/clean_data.py\n  format:
      CSV\n  mime_type: text/csv\n  pattern: noaa-weather-data-jfk-airport/jfk_weather_cleaned.csv\n  records:
      75125\n  size: 6M\n  type: file\ncreated: 2019-07-19\ndescription: Local climatological
      data originally collected at JFK airport.\ndomain: Time Series\nformat:\n- type:
      CSV\n  url: https://en.wikipedia.org/wiki/Comma-separated_values\nid: \"noaa-weather-data\\u2013jfk-airport\"\nlicense:\n  commercial:
      false\n  name: CDLA-Sharing\n  url: https://cdla.io/sharing-1-0/\nname: \"NOAA
      Weather Data \\u2013 JFK Airport\"\nprovider:\n  name: Data Asset eXchange\n  url:
      https://developer.ibm.com/exchanges/data/all/jfk-weather-data/\nrelated_assets:\n-
      description: Data preview and glossary\n  name: Explore the data\n  url: https://dax-cdn.cdn.appdomain.cloud/dax-noaa-weather-data-jfk-airport/1.1.4/data-preview/index.html\n-
      description: Watson Studio Gallery project for the NOAA data set\n  mime_type:
      text/html\n  name: DAX Weather project\n  url: https://dataplatform.cloud.ibm.com/exchange/public/entry/view/a7432f0c29c5bda2fb42749f363bd9ff\n-
      description: Accelerator for Cloud Pak for Data\n  mime_type: text/html\n  name:
      Effective Farming - Monitor Crop Growth\n  url: https://community.ibm.com/community/user/cloudpakfordata/viewdocument/effective-farming-monitor-crop-gr\n-
      description: Elyra example pipeline\n  mime_type: text/html\n  name: Elyra pipeline\n  url:
      https://github.com/elyra-ai/examples/tree/master/pipelines/dax_noaa_weather_data\nrepository:\n  mime_type:
      application/x-tar\n  sha_512: e3f27a8fcc0db5289df356e3f48aef6df56236798d5b3ae3889d358489ec6609d2d797e4c4932b86016d2ce4a379ac0a0749b6fb2c293ebae4e585ea1c8422ac\n  size:
      3.5M\n  type: HTTP\n  url: https://dax-cdn.cdn.appdomain.cloud/dax-noaa-weather-data-jfk-airport/1.1.4/noaa-weather-data-jfk-airport.tar.gz\nseo_tags:\n-
      weather\n- time series\nsource:\n  name: National Oceanic and Atmospheric Administration\n  url:
      https://www.ncdc.noaa.gov/\nupdated: 2020-07-19\nversion: 1.1.4\n", "name":
      "dax_yaml", "optional": true}], "name": "dax-to-dlf"}'
    sidecar.istio.io/inject: 'false'
    tekton.dev/input_artifacts: '{"echo": [{"name": "dax-to-dlf-converter-DLF-YAML",
      "parent_task": "dax-to-dlf-converter"}]}'
    tekton.dev/output_artifacts: '{"dax-to-dlf-converter": [{"name": "dax-to-dlf-converter-DLF-YAML",
      "path": "/tmp/outputs/DLF_YAML/data"}]}'
  name: dax-to-dlf
spec:
  params:
  - name: dax_yaml
    value: "content:\n- description: Raw data file\n  format: CSV\n  mime_type: text/csv\n\
      \  pattern: noaa-weather-data-jfk-airport/jfk_weather.csv\n  records: 114546\n\
      \  size: 30M\n  type: file\n- description: jfk_weather.csv cleaned-up using\
      \ noaa-weather-data-jfk-airport/clean_data.py\n  format: CSV\n  mime_type: text/csv\n\
      \  pattern: noaa-weather-data-jfk-airport/jfk_weather_cleaned.csv\n  records:\
      \ 75125\n  size: 6M\n  type: file\ncreated: 2019-07-19\ndescription: Local climatological\
      \ data originally collected at JFK airport.\ndomain: Time Series\nformat:\n\
      - type: CSV\n  url: https://en.wikipedia.org/wiki/Comma-separated_values\nid:\
      \ \"noaa-weather-data\\u2013jfk-airport\"\nlicense:\n  commercial: false\n \
      \ name: CDLA-Sharing\n  url: https://cdla.io/sharing-1-0/\nname: \"NOAA Weather\
      \ Data \\u2013 JFK Airport\"\nprovider:\n  name: Data Asset eXchange\n  url:\
      \ https://developer.ibm.com/exchanges/data/all/jfk-weather-data/\nrelated_assets:\n\
      - description: Data preview and glossary\n  name: Explore the data\n  url: https://dax-cdn.cdn.appdomain.cloud/dax-noaa-weather-data-jfk-airport/1.1.4/data-preview/index.html\n\
      - description: Watson Studio Gallery project for the NOAA data set\n  mime_type:\
      \ text/html\n  name: DAX Weather project\n  url: https://dataplatform.cloud.ibm.com/exchange/public/entry/view/a7432f0c29c5bda2fb42749f363bd9ff\n\
      - description: Accelerator for Cloud Pak for Data\n  mime_type: text/html\n\
      \  name: Effective Farming - Monitor Crop Growth\n  url: https://community.ibm.com/community/user/cloudpakfordata/viewdocument/effective-farming-monitor-crop-gr\n\
      - description: Elyra example pipeline\n  mime_type: text/html\n  name: Elyra\
      \ pipeline\n  url: https://github.com/elyra-ai/examples/tree/master/pipelines/dax_noaa_weather_data\n\
      repository:\n  mime_type: application/x-tar\n  sha_512: e3f27a8fcc0db5289df356e3f48aef6df56236798d5b3ae3889d358489ec6609d2d797e4c4932b86016d2ce4a379ac0a0749b6fb2c293ebae4e585ea1c8422ac\n\
      \  size: 3.5M\n  type: HTTP\n  url: https://dax-cdn.cdn.appdomain.cloud/dax-noaa-weather-data-jfk-airport/1.1.4/noaa-weather-data-jfk-airport.tar.gz\n\
      seo_tags:\n- weather\n- time series\nsource:\n  name: National Oceanic and Atmospheric\
      \ Administration\n  url: https://www.ncdc.noaa.gov/\nupdated: 2020-07-19\nversion:\
      \ 1.1.4\n"
  pipelineSpec:
    params:
    - default: "content:\n- description: Raw data file\n  format: CSV\n  mime_type:\
        \ text/csv\n  pattern: noaa-weather-data-jfk-airport/jfk_weather.csv\n  records:\
        \ 114546\n  size: 30M\n  type: file\n- description: jfk_weather.csv cleaned-up\
        \ using noaa-weather-data-jfk-airport/clean_data.py\n  format: CSV\n  mime_type:\
        \ text/csv\n  pattern: noaa-weather-data-jfk-airport/jfk_weather_cleaned.csv\n\
        \  records: 75125\n  size: 6M\n  type: file\ncreated: 2019-07-19\ndescription:\
        \ Local climatological data originally collected at JFK airport.\ndomain:\
        \ Time Series\nformat:\n- type: CSV\n  url: https://en.wikipedia.org/wiki/Comma-separated_values\n\
        id: \"noaa-weather-data\\u2013jfk-airport\"\nlicense:\n  commercial: false\n\
        \  name: CDLA-Sharing\n  url: https://cdla.io/sharing-1-0/\nname: \"NOAA Weather\
        \ Data \\u2013 JFK Airport\"\nprovider:\n  name: Data Asset eXchange\n  url:\
        \ https://developer.ibm.com/exchanges/data/all/jfk-weather-data/\nrelated_assets:\n\
        - description: Data preview and glossary\n  name: Explore the data\n  url:\
        \ https://dax-cdn.cdn.appdomain.cloud/dax-noaa-weather-data-jfk-airport/1.1.4/data-preview/index.html\n\
        - description: Watson Studio Gallery project for the NOAA data set\n  mime_type:\
        \ text/html\n  name: DAX Weather project\n  url: https://dataplatform.cloud.ibm.com/exchange/public/entry/view/a7432f0c29c5bda2fb42749f363bd9ff\n\
        - description: Accelerator for Cloud Pak for Data\n  mime_type: text/html\n\
        \  name: Effective Farming - Monitor Crop Growth\n  url: https://community.ibm.com/community/user/cloudpakfordata/viewdocument/effective-farming-monitor-crop-gr\n\
        - description: Elyra example pipeline\n  mime_type: text/html\n  name: Elyra\
        \ pipeline\n  url: https://github.com/elyra-ai/examples/tree/master/pipelines/dax_noaa_weather_data\n\
        repository:\n  mime_type: application/x-tar\n  sha_512: e3f27a8fcc0db5289df356e3f48aef6df56236798d5b3ae3889d358489ec6609d2d797e4c4932b86016d2ce4a379ac0a0749b6fb2c293ebae4e585ea1c8422ac\n\
        \  size: 3.5M\n  type: HTTP\n  url: https://dax-cdn.cdn.appdomain.cloud/dax-noaa-weather-data-jfk-airport/1.1.4/noaa-weather-data-jfk-airport.tar.gz\n\
        seo_tags:\n- weather\n- time series\nsource:\n  name: National Oceanic and\
        \ Atmospheric Administration\n  url: https://www.ncdc.noaa.gov/\nupdated:\
        \ 2020-07-19\nversion: 1.1.4\n"
      name: dax_yaml
    tasks:
    - name: dax-to-dlf-converter
      params:
      - name: dax_yaml
        value: $(params.dax_yaml)
      taskSpec:
        params:
        - name: dax_yaml
        results:
        - description: /tmp/outputs/DLF_YAML/data
          name: dlf-yaml
        steps:
        - args:
          - -u
          - dataset_converter.py
          - --dataset-yaml
          - $(inputs.params.dax_yaml)
          - --output-path
          - $(results.dlf-yaml.path)
          command:
          - python
          image: ckadner/dax-to-dlf:0.0.7
          name: main
        - env:
          - name: PIPELINERUN
            valueFrom:
              fieldRef:
                fieldPath: metadata.labels['tekton.dev/pipelineRun']
          - name: PIPELINETASK
            valueFrom:
              fieldRef:
                fieldPath: metadata.labels['tekton.dev/pipelineTask']
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                key: accesskey
                name: mlpipeline-minio-artifact
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                key: secretkey
                name: mlpipeline-minio-artifact
          image: minio/mc
          name: copy-artifacts
          script: '#!/usr/bin/env sh

            mc config host add storage http://minio-service.$NAMESPACE:9000 $AWS_ACCESS_KEY_ID
            $AWS_SECRET_ACCESS_KEY

            tar -cvzf DLF-YAML.tgz $(results.dlf-yaml.path)

            mc cp DLF-YAML.tgz storage/mlpipeline/artifacts/$PIPELINERUN/$PIPELINETASK/DLF-YAML.tgz

            '
    - name: echo
      params:
      - name: dax-to-dlf-converter-DLF-YAML
        value: $(tasks.dax-to-dlf-converter.results.dlf-yaml)
      taskSpec:
        params:
        - name: dax-to-dlf-converter-DLF-YAML
        steps:
        - args:
          - echo "$0"
          - $(inputs.params.dax-to-dlf-converter-DLF-YAML)
          command:
          - sh
          - -c
          image: library/bash:4
          name: main
